import { Inject, Injectable } from '@angular/core';
import { first } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NodebootOauth2StarterService {
    constructor(http, configuration) {
        this.http = http;
        this.configuration = configuration;
        this.authUserApi = configuration.api + '/auth/user';
        this.authRoleApi = configuration.api + '/auth/role';
        this.authResourceApi = configuration.api + '/auth/resource';
        this.authClientApi = configuration.api + '/auth/client';
        this.authApplicationApi = configuration.api + '/auth/application ';
    }
    getUsers(pageIndex, order) {
        return this.http
            .get(this.authUserApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    createUser(createUserData) {
        return this.http.post(this.authUserApi, createUserData).pipe(first());
    }
    updatePassword(userId, newPassword, oldPassword) {
        return this.http
            .put(`${this.authUserApi}/${userId}/password`, {
            newPassword,
            oldPassword,
        })
            .pipe(first());
    }
    updateUserRoles(userId, roles, originalRolesList) {
        return this.http
            .put(`${this.authUserApi}/${userId}/role`, { roles, originalRolesList })
            .pipe(first());
    }
    deleteUser(subjectId) {
        return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());
    }
    updateUser(subjectId, updateBody) {
        return this.http
            .put(`${this.authUserApi}/${subjectId}`, updateBody)
            .pipe(first());
    }
    getUserProfile() {
        return this.http
            .get(`${this.authUserApi}/profile/me`)
            .pipe(first());
    }
    getRolesBasic() {
        return this.http
            .get(this.authRoleApi + '?basic=true')
            .pipe(first());
    }
    createRole(identifier, allowedObject) {
        return this.http
            .post(this.authRoleApi, { identifier, allowedObject })
            .pipe(first());
    }
    updateRoleOptions(roleId, newAllowedObject, originalAllowedObject) {
        return this.http
            .put(this.authRoleApi + `/${roleId}/permission`, {
            newAllowedObject: newAllowedObject,
            originalAllowedObject: originalAllowedObject,
        })
            .pipe(first());
    }
    deleteRole(roleId) {
        return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());
    }
    getRoles(pageIndex, order) {
        return this.http
            .get(this.authRoleApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    getResourcesBasic() {
        return this.http
            .get(this.authResourceApi + `?basic=true`)
            .pipe(first());
    }
    getResources(pageIndex, order) {
        return this.http
            .get(this.authResourceApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    updateResourceOptions(resourceId, newResourceOptions, originalResourceOptions) {
        return this.http
            .put(this.authResourceApi + `/${resourceId}/permission`, {
            newResourcePermissions: newResourceOptions,
            originalResourcePermissions: originalResourceOptions,
        })
            .pipe(first());
    }
    deleteResource(resourceId) {
        return this.http.delete(this.authResourceApi + `/${resourceId}`);
    }
    createResource(resourceIdentifier, applications_id) {
        return this.http.post(this.authResourceApi, {
            resourceIdentifier,
            applications_id,
        });
    }
    getClients(pageIndex, order) {
        return this.http
            .get(this.authClientApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    createClient(createClientData, longLive) {
        return this.http
            .post(this.authClientApi + `?longLive=${longLive}`, createClientData)
            .pipe(first());
    }
    deleteClient(subjectId) {
        return this.http.delete(`${this.authClientApi}/${subjectId}`).pipe(first());
    }
    updateClientRoles(clientId, roles, originalRolesList) {
        return this.http
            .put(`${this.authClientApi}/${clientId}/role`, {
            roles,
            originalRolesList,
        })
            .pipe(first());
    }
    updateClient(subjectId, updateBody) {
        return this.http
            .put(`${this.authClientApi}/${subjectId}`, updateBody)
            .pipe(first());
    }
    getApplications() {
        return this.http.get(this.authApplicationApi);
    }
    getSecret(clientId) {
        return this.http
            .get(this.authClientApi + `/${clientId}/secret`)
            .pipe(first());
    }
    generateLongLiveToken(clientId, identifier) {
        return this.http
            .put(this.authClientApi + `/${clientId}/long-live`, {
            identifier,
        })
            .pipe(first());
    }
    removeLongLiveToken(clientId, identifier) {
        return this.http
            .put(this.authClientApi + `/${clientId}/long-live?remove_long_live=true`, {
            identifier,
        })
            .pipe(first());
    }
    modifyRevokeStatus(clientId, revoke) {
        return this.http
            .put(this.authClientApi + `/${clientId}/revoke`, {
            revoke,
        })
            .pipe(first());
    }
    get apiUrl() {
        return this.configuration.api;
    }
}
NodebootOauth2StarterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.2", ngImport: i0, type: NodebootOauth2StarterService, deps: [{ token: i1.HttpClient }, { token: 'configuration' }], target: i0.ɵɵFactoryTarget.Injectable });
NodebootOauth2StarterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.2", ngImport: i0, type: NodebootOauth2StarterService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.2", ngImport: i0, type: NodebootOauth2StarterService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['configuration']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZWJvb3Qtb2F1dGgyLXN0YXJ0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25vZGVib290LW9hdXRoMi1zdGFydGVyL3NyYy9saWIvbm9kZWJvb3Qtb2F1dGgyLXN0YXJ0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFLekMsTUFBTSxPQUFPLDRCQUE0QjtJQVV2QyxZQUNVLElBQWdCLEVBRXhCLGFBRUM7UUFKTyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBTXhCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxZQUFZLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztRQUNwRCxJQUFJLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcsZ0JBQWdCLENBQUM7UUFDNUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLGNBQWMsQ0FBQztRQUN4RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQztJQUNyRSxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQWlCLEVBQUUsS0FBYTtRQUN2QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUNGLElBQUksQ0FBQyxXQUFXO1lBQ2QsY0FBYyxTQUFTLDRCQUE0QixLQUFLLEVBQUUsQ0FDN0Q7YUFDQSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsVUFBVSxDQUFDLGNBS1Y7UUFDQyxPQUFP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dHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmaXJzdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTm9kZWJvb3RPYXV0aDJTdGFydGVyU2VydmljZSB7XG4gIGNvbmZpZ3VyYXRpb246IHtcbiAgICBhcGk6IHN0cmluZztcbiAgfTtcbiAgYXV0aFVzZXJBcGk6IHN0cmluZztcbiAgYXV0aFJvbGVBcGk6IHN0cmluZztcbiAgYXV0aFJlc291cmNlQXBpOiBzdHJpbmc7XG4gIGF1dGhDbGllbnRBcGk6IHN0cmluZztcbiAgYXV0aEFwcGxpY2F0aW9uQXBpOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIEBJbmplY3QoJ2NvbmZpZ3VyYXRpb24nKVxuICAgIGNvbmZpZ3VyYXRpb246IHtcbiAgICAgIGFwaTogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjtcbiAgICB0aGlzLmF1dGhVc2VyQXBpID0gY29uZmlndXJhdGlvbi5hcGkgKyAnL2F1dGgvdXNlcic7XG4gICAgdGhpcy5hdXRoUm9sZUFwaSA9IGNvbmZpZ3VyYXRpb24uYXBpICsgJy9hdXRoL3JvbGUnO1xuICAgIHRoaXMuYXV0aFJlc291cmNlQXBpID0gY29uZmlndXJhdGlvbi5hcGkgKyAnL2F1dGgvcmVzb3VyY2UnO1xuICAgIHRoaXMuYXV0aENsaWVudEFwaSA9IGNvbmZpZ3VyYXRpb24uYXBpICsgJy9hdXRoL2NsaWVudCc7XG4gICAgdGhpcy5hdXRoQXBwbGljYXRpb25BcGkgPSBjb25maWd1cmF0aW9uLmFwaSArICcvYXV0aC9hcHBsaWNhdGlvbiAnO1xuICB9XG5cbiAgZ2V0VXNlcnMocGFnZUluZGV4OiBudW1iZXIsIG9yZGVyOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFVzZXJQYWdpbmF0aW9uUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxVc2VyUGFnaW5hdGlvblJlc3VsdD4oXG4gICAgICAgIHRoaXMuYXV0aFVzZXJBcGkgK1xuICAgICAgICAgIGA/cGFnZUluZGV4PSR7cGFnZUluZGV4fSYmaXRlbXNQZXJQYWdlPTIwJiZvcmRlcj0ke29yZGVyfWBcbiAgICAgIClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgY3JlYXRlVXNlcihjcmVhdGVVc2VyRGF0YToge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgcm9sZXM6IEJhc2ljUm9sZVtdO1xuICB9KSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYXV0aFVzZXJBcGksIGNyZWF0ZVVzZXJEYXRhKS5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgdXBkYXRlUGFzc3dvcmQodXNlcklkOiBudW1iZXIsIG5ld1Bhc3N3b3JkOiBzdHJpbmcsIG9sZFBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucHV0KGAke3RoaXMuYXV0aFVzZXJBcGl9LyR7dXNlcklkfS9wYXNzd29yZGAsIHtcbiAgICAgICAgbmV3UGFzc3dvcmQsXG4gICAgICAgIG9sZFBhc3N3b3JkLFxuICAgICAgfSlcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgdXBkYXRlVXNlclJvbGVzKFxuICAgIHVzZXJJZDogbnVtYmVyLFxuICAgIHJvbGVzOiBCYXNpY1JvbGVbXSxcbiAgICBvcmlnaW5hbFJvbGVzTGlzdDogQmFzaWNSb2xlW11cbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dChgJHt0aGlzLmF1dGhVc2VyQXBpfS8ke3VzZXJJZH0vcm9sZWAsIHsgcm9sZXMsIG9yaWdpbmFsUm9sZXNMaXN0IH0pXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIGRlbGV0ZVVzZXIoc3ViamVjdElkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShgJHt0aGlzLmF1dGhVc2VyQXBpfS8ke3N1YmplY3RJZH1gKS5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgdXBkYXRlVXNlcihzdWJqZWN0SWQ6IG51bWJlciwgdXBkYXRlQm9keTogVXNlclVwZGF0ZUJvZHkpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucHV0KGAke3RoaXMuYXV0aFVzZXJBcGl9LyR7c3ViamVjdElkfWAsIHVwZGF0ZUJvZHkpXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIGdldFVzZXJQcm9maWxlKCk6IE9ic2VydmFibGU8VXNlclByb2ZpbGVSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PFVzZXJQcm9maWxlUmVzdWx0PihgJHt0aGlzLmF1dGhVc2VyQXBpfS9wcm9maWxlL21lYClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgZ2V0Um9sZXNCYXNpYygpOiBPYnNlcnZhYmxlPFJvbGVSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PFJvbGVSZXN1bHQ+KHRoaXMuYXV0aFJvbGVBcGkgKyAnP2Jhc2ljPXRydWUnKVxuICAgICAgLnBpcGUoZmlyc3QoKSk7XG4gIH1cblxuICBjcmVhdGVSb2xlKGlkZW50aWZpZXI6IHN0cmluZywgYWxsb3dlZE9iamVjdDogUmVjb3JkPHN0cmluZywgT3B0aW9uW10+KSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnBvc3QodGhpcy5hdXRoUm9sZUFwaSwgeyBpZGVudGlmaWVyLCBhbGxvd2VkT2JqZWN0IH0pXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIHVwZGF0ZVJvbGVPcHRpb25zKFxuICAgIHJvbGVJZDogbnVtYmVyLFxuICAgIG5ld0FsbG93ZWRPYmplY3Q6IFJlY29yZDxzdHJpbmcsIE9wdGlvbltdPixcbiAgICBvcmlnaW5hbEFsbG93ZWRPYmplY3Q6IFJlY29yZDxzdHJpbmcsIE9wdGlvbltdPlxuICApIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucHV0KHRoaXMuYXV0aFJvbGVBcGkgKyBgLyR7cm9sZUlkfS9wZXJtaXNzaW9uYCwge1xuICAgICAgICBuZXdBbGxvd2VkT2JqZWN0OiBuZXdBbGxvd2VkT2JqZWN0LFxuICAgICAgICBvcmlnaW5hbEFsbG93ZWRPYmplY3Q6IG9yaWdpbmFsQWxsb3dlZE9iamVjdCxcbiAgICAgIH0pXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIGRlbGV0ZVJvbGUocm9sZUlkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZSh0aGlzLmF1dGhSb2xlQXBpICsgYC8ke3JvbGVJZH1gKS5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgZ2V0Um9sZXMocGFnZUluZGV4OiBudW1iZXIsIG9yZGVyOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFJvbGVQYWdpbmF0aW9uUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxSb2xlUGFnaW5hdGlvblJlc3VsdD4oXG4gICAgICAgIHRoaXMuYXV0aFJvbGVBcGkgK1xuICAgICAgICAgIGA/cGFnZUluZGV4PSR7cGFnZUluZGV4fSYmaXRlbXNQZXJQYWdlPTIwJiZvcmRlcj0ke29yZGVyfWBcbiAgICAgIClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgZ2V0UmVzb3VyY2VzQmFzaWMoKTogT2JzZXJ2YWJsZTxPcHRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PE9wdGlvblJlc3VsdD4odGhpcy5hdXRoUmVzb3VyY2VBcGkgKyBgP2Jhc2ljPXRydWVgKVxuICAgICAgLnBpcGUoZmlyc3QoKSk7XG4gIH1cblxuICBnZXRSZXNvdXJjZXMoXG4gICAgcGFnZUluZGV4OiBudW1iZXIsXG4gICAgb3JkZXI6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPFJlc291cmNlUGFnaW5hdGlvblJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQ8UmVzb3VyY2VQYWdpbmF0aW9uUmVzdWx0PihcbiAgICAgICAgdGhpcy5hdXRoUmVzb3VyY2VBcGkgK1xuICAgICAgICAgIGA/cGFnZUluZGV4PSR7cGFnZUluZGV4fSYmaXRlbXNQZXJQYWdlPTIwJiZvcmRlcj0ke29yZGVyfWBcbiAgICAgIClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgdXBkYXRlUmVzb3VyY2VPcHRpb25zKFxuICAgIHJlc291cmNlSWQ6IG51bWJlcixcbiAgICBuZXdSZXNvdXJjZU9wdGlvbnM6IE9wdGlvbltdLFxuICAgIG9yaWdpbmFsUmVzb3VyY2VPcHRpb25zOiBPcHRpb25bXVxuICApIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucHV0KHRoaXMuYXV0aFJlc291cmNlQXBpICsgYC8ke3Jlc291cmNlSWR9L3Blcm1pc3Npb25gLCB7XG4gICAgICAgIG5ld1Jlc291cmNlUGVybWlzc2lvbnM6IG5ld1Jlc291cmNlT3B0aW9ucyxcbiAgICAgICAgb3JpZ2luYWxSZXNvdXJjZVBlcm1pc3Npb25zOiBvcmlnaW5hbFJlc291cmNlT3B0aW9ucyxcbiAgICAgIH0pXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIGRlbGV0ZVJlc291cmNlKHJlc291cmNlSWQ6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMuYXV0aFJlc291cmNlQXBpICsgYC8ke3Jlc291cmNlSWR9YCk7XG4gIH1cblxuICBjcmVhdGVSZXNvdXJjZShyZXNvdXJjZUlkZW50aWZpZXI6IHN0cmluZywgYXBwbGljYXRpb25zX2lkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5hdXRoUmVzb3VyY2VBcGksIHtcbiAgICAgIHJlc291cmNlSWRlbnRpZmllcixcbiAgICAgIGFwcGxpY2F0aW9uc19pZCxcbiAgICB9KTtcbiAgfVxuXG4gIGdldENsaWVudHMoXG4gICAgcGFnZUluZGV4OiBudW1iZXIsXG4gICAgb3JkZXI6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPENsaWVudFBhZ2luYXRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PENsaWVudFBhZ2luYXRpb25SZXN1bHQ+KFxuICAgICAgICB0aGlzLmF1dGhDbGllbnRBcGkgK1xuICAgICAgICAgIGA/cGFnZUluZGV4PSR7cGFnZUluZGV4fSYmaXRlbXNQZXJQYWdlPTIwJiZvcmRlcj0ke29yZGVyfWBcbiAgICAgIClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgY3JlYXRlQ2xpZW50KFxuICAgIGNyZWF0ZUNsaWVudERhdGE6IHtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIGlkZW50aWZpZXI6IHN0cmluZztcbiAgICAgIHJvbGVzOiBCYXNpY1JvbGVbXTtcbiAgICB9LFxuICAgIGxvbmdMaXZlOiBib29sZWFuXG4gICk6IE9ic2VydmFibGU8Q2xpZW50Q3JlYXRlUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnBvc3Q8Q2xpZW50Q3JlYXRlUmVzdWx0PihcbiAgICAgICAgdGhpcy5hdXRoQ2xpZW50QXBpICsgYD9sb25nTGl2ZT0ke2xvbmdMaXZlfWAsXG4gICAgICAgIGNyZWF0ZUNsaWVudERhdGFcbiAgICAgIClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgZGVsZXRlQ2xpZW50KHN1YmplY3RJZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoYCR7dGhpcy5hdXRoQ2xpZW50QXBpfS8ke3N1YmplY3RJZH1gKS5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgdXBkYXRlQ2xpZW50Um9sZXMoXG4gICAgY2xpZW50SWQ6IG51bWJlcixcbiAgICByb2xlczogQmFzaWNSb2xlW10sXG4gICAgb3JpZ2luYWxSb2xlc0xpc3Q6IEJhc2ljUm9sZVtdXG4gICkge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5wdXQoYCR7dGhpcy5hdXRoQ2xpZW50QXBpfS8ke2NsaWVudElkfS9yb2xlYCwge1xuICAgICAgICByb2xlcyxcbiAgICAgICAgb3JpZ2luYWxSb2xlc0xpc3QsXG4gICAgICB9KVxuICAgICAgLnBpcGUoZmlyc3QoKSk7XG4gIH1cblxuICB1cGRhdGVDbGllbnQoc3ViamVjdElkOiBudW1iZXIsIHVwZGF0ZUJvZHk6IENsaWVudFVwZGF0ZUJvZHkpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucHV0KGAke3RoaXMuYXV0aENsaWVudEFwaX0vJHtzdWJqZWN0SWR9YCwgdXBkYXRlQm9keSlcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgZ2V0QXBwbGljYXRpb25zKCk6IE9ic2VydmFibGU8QXBwbGljYXRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBcHBsaWNhdGlvblJlc3VsdD4odGhpcy5hdXRoQXBwbGljYXRpb25BcGkpO1xuICB9XG5cbiAgZ2V0U2VjcmV0KGNsaWVudElkOiBudW1iZXIpOiBPYnNlcnZhYmxlPFNlY3JldFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PFNlY3JldFRva2VuUmVzcG9uc2U+KHRoaXMuYXV0aENsaWVudEFwaSArIGAvJHtjbGllbnRJZH0vc2VjcmV0YClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgZ2VuZXJhdGVMb25nTGl2ZVRva2VuKFxuICAgIGNsaWVudElkOiBudW1iZXIsXG4gICAgaWRlbnRpZmllcjogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8TG9uZ0xpdmVUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dDxMb25nTGl2ZVRva2VuUmVzcG9uc2U+KFxuICAgICAgICB0aGlzLmF1dGhDbGllbnRBcGkgKyBgLyR7Y2xpZW50SWR9L2xvbmctbGl2ZWAsXG4gICAgICAgIHtcbiAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICB9XG4gICAgICApXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIHJlbW92ZUxvbmdMaXZlVG9rZW4oXG4gICAgY2xpZW50SWQ6IG51bWJlcixcbiAgICBpZGVudGlmaWVyOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxCYXNpY1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dDxCYXNpY1Jlc3BvbnNlPihcbiAgICAgICAgdGhpcy5hdXRoQ2xpZW50QXBpICsgYC8ke2NsaWVudElkfS9sb25nLWxpdmU/cmVtb3ZlX2xvbmdfbGl2ZT10cnVlYCxcbiAgICAgICAge1xuICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgIC5waXBlKGZpcnN0KCkpO1xuICB9XG5cbiAgbW9kaWZ5UmV2b2tlU3RhdHVzKGNsaWVudElkOiBudW1iZXIsIHJldm9rZTogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5wdXQ8QmFzaWNSZXNwb25zZT4odGhpcy5hdXRoQ2xpZW50QXBpICsgYC8ke2NsaWVudElkfS9yZXZva2VgLCB7XG4gICAgICAgIHJldm9rZSxcbiAgICAgIH0pXG4gICAgICAucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIGdldCBhcGlVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvbi5hcGk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIEJhc2ljUmVzcG9uc2Uge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFNlY3JldFRva2VuUmVzcG9uc2Uge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgY29udGVudDoge1xuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgTG9uZ0xpdmVUb2tlblJlc3BvbnNlIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBjb2RlOiBudW1iZXI7XG4gIGNvbnRlbnQ6IHtcbiAgICBhY2Nlc3NfdG9rZW46IHN0cmluZztcbiAgfTtcbn1cblxuaW50ZXJmYWNlIEFwcGxpY2F0aW9uUmVzdWx0IHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBjb2RlOiBudW1iZXI7XG4gIGNvbnRlbnQ/OiBBcHBsaWNhdGlvbltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uIHtcbiAgaWQ6IG51bWJlcjtcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWVudFVwZGF0ZUJvZHkge1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50IHtcbiAgaWQ6IG51bWJlcjtcbiAgc3ViamVjdElkOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xuICBoYXNMb25nTGl2ZVRva2VuPzogYm9vbGVhbjtcbiAgcmV2b2tlZD86IGJvb2xlYW47XG4gIHJvbGVzOiBSb2xlW107XG59XG5cbmludGVyZmFjZSBDbGllbnRDcmVhdGVSZXN1bHQge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgY29udGVudD86IENsaWVudENyZWF0ZUNvbnRlbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50Q3JlYXRlQ29udGVudCB7XG4gIGNsaWVudFNlY3JldDogc3RyaW5nO1xuICBjbGllbnRJZDogc3RyaW5nO1xuICBhY2Nlc3NfdG9rZW46IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIENsaWVudFBhZ2luYXRpb25SZXN1bHQge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgY29udGVudD86IENsaWVudFBhZ2luYXRpb25Db250ZW50O1xufVxuXG5pbnRlcmZhY2UgQ2xpZW50UGFnaW5hdGlvbkNvbnRlbnQge1xuICBpdGVtczogQ2xpZW50W107XG4gIHBhZ2VJbmRleDogbnVtYmVyO1xuICBpdGVtc1BlclBhZ2U6IG51bWJlcjtcbiAgdG90YWxJdGVtczogbnVtYmVyO1xuICB0b3RhbFBhZ2VzOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBPcHRpb25SZXN1bHQge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgY29udGVudD86IFJlc291cmNlW107XG59XG5cbmludGVyZmFjZSBSZXNvdXJjZVBhZ2luYXRpb25SZXN1bHQge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgY29udGVudD86IFJlc291cmNlUGFnaW5hdGlvbkNvbnRlbnQ7XG59XG5cbmludGVyZmFjZSBSZXNvdXJjZVBhZ2luYXRpb25Db250ZW50IHtcbiAgaXRlbXM6IFJlc291cmNlW107XG4gIHBhZ2VJbmRleDogbnVtYmVyO1xuICBpdGVtc1BlclBhZ2U6IG51bWJlcjtcbiAgdG90YWxJdGVtczogbnVtYmVyO1xuICB0b3RhbFBhZ2VzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclVwZGF0ZUJvZHkge1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBVc2VyUGFnaW5hdGlvblJlc3VsdCB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY29kZTogbnVtYmVyO1xuICBjb250ZW50PzogUGFnaW5hdGlvblVzZXJDb250ZW50O1xufVxuXG5pbnRlcmZhY2UgVXNlclByb2ZpbGVSZXN1bHQge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgY29udGVudD86IFVzZXI7XG59XG5cbmludGVyZmFjZSBQYWdpbmF0aW9uVXNlckNvbnRlbnQge1xuICBpdGVtczogVXNlcltdO1xuICBwYWdlSW5kZXg6IG51bWJlcjtcbiAgaXRlbXNQZXJQYWdlOiBudW1iZXI7XG4gIHRvdGFsSXRlbXM6IG51bWJlcjtcbiAgdG90YWxQYWdlczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICBpZDogbnVtYmVyO1xuICBzdWJqZWN0SWQ6IG51bWJlcjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICB1c2VybmFtZTogc3RyaW5nO1xuICByb2xlczogUm9sZVVzZXJbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSb2xlVXNlciB7XG4gIGlkOiBudW1iZXI7XG4gIGlkZW50aWZpZXI6IHN0cmluZztcbiAgcmVzb3VyY2VzOiBCYXNpY1Jlc291cmNlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzaWNSZXNvdXJjZSB7XG4gIGlkOiBudW1iZXI7XG4gIGFwcGxpY2F0aW9uUmVzb3VyY2VOYW1lOiBzdHJpbmc7XG4gIGFsbG93ZWQ6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2ljUm9sZSB7XG4gIGlkOiBudW1iZXI7XG4gIGlkZW50aWZpZXI6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFJvbGVQYWdpbmF0aW9uUmVzdWx0IHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBjb2RlOiBudW1iZXI7XG4gIGNvbnRlbnQ/OiBSb2xlUGFnaW5hdGlvbkNvbnRlbnQ7XG59XG5cbmludGVyZmFjZSBSb2xlUGFnaW5hdGlvbkNvbnRlbnQge1xuICBpdGVtczogUm9sZVtdO1xuICBwYWdlSW5kZXg6IG51bWJlcjtcbiAgaXRlbXNQZXJQYWdlOiBudW1iZXI7XG4gIHRvdGFsSXRlbXM6IG51bWJlcjtcbiAgdG90YWxQYWdlczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvbGUge1xuICBpZDogbnVtYmVyO1xuICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gIHJlc291cmNlczogUmVzb3VyY2VbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZSB7XG4gIGlkOiBudW1iZXI7XG4gIGFwcGxpY2F0aW9uUmVzb3VyY2VOYW1lOiBzdHJpbmc7XG4gIGFsbG93ZWQ6IE9wdGlvbltdO1xufVxuXG5pbnRlcmZhY2UgUm9sZVJlc3VsdCB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY29kZTogbnVtYmVyO1xuICBjb250ZW50PzogQmFzaWNSb2xlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzaWNSb2xlIHtcbiAgaWQ6IG51bWJlcjtcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbiB7XG4gIGFsbG93ZWQ6IHN0cmluZztcbiAgaWQ6IG51bWJlcjtcbn1cbiJdfQ==