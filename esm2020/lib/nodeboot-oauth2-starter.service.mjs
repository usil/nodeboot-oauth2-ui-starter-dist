import { Inject, Injectable } from '@angular/core';
import { first } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NodebootOauth2StarterService {
    constructor(http, configuration) {
        this.http = http;
        this.configuration = configuration;
        this.authUserApi = configuration.api + '/auth/user';
        this.authRoleApi = configuration.api + '/auth/role';
        this.authResourceApi = configuration.api + '/auth/resource';
        this.authClientApi = configuration.api + '/auth/client';
        this.authApplicationApi = configuration.api + '/auth/application ';
    }
    getUsers(pageIndex, order) {
        return this.http
            .get(this.authUserApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    createUser(createUserData) {
        return this.http.post(this.authUserApi, createUserData).pipe(first());
    }
    updatePassword(userId, newPassword, oldPassword) {
        return this.http
            .put(`${this.authUserApi}/${userId}/password`, {
            newPassword,
            oldPassword,
        })
            .pipe(first());
    }
    updateUserRoles(userId, roles) {
        return this.http
            .put(`${this.authUserApi}/${userId}/role`, { roles })
            .pipe(first());
    }
    deleteUser(subjectId) {
        return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());
    }
    updateUser(subjectId, updateBody) {
        return this.http
            .put(`${this.authUserApi}/${subjectId}`, updateBody)
            .pipe(first());
    }
    getUserProfile() {
        return this.http
            .get(`${this.authUserApi}/profile/me`)
            .pipe(first());
    }
    getRolesBasic() {
        return this.http
            .get(this.authRoleApi + '?basic=true')
            .pipe(first());
    }
    createRole(identifier, allowedObject) {
        return this.http
            .post(this.authRoleApi, { identifier, allowedObject })
            .pipe(first());
    }
    updateRoleOptions(roleId, newAllowedObject, originalAllowedObject) {
        return this.http
            .put(this.authRoleApi + `/${roleId}/option`, {
            newAllowedObject,
            originalAllowedObject,
        })
            .pipe(first());
    }
    deleteRole(roleId) {
        return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());
    }
    getRoles(pageIndex, order) {
        return this.http
            .get(this.authRoleApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    getResourcesBasic() {
        return this.http
            .get(this.authResourceApi + `?basic=true`)
            .pipe(first());
    }
    getResources(pageIndex, order) {
        return this.http
            .get(this.authResourceApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    updateResourceOptions(resourceId, newResourceOptions, originalResourceOptions) {
        return this.http
            .put(this.authResourceApi + `/${resourceId}/option`, {
            newResourceOptions,
            originalResourceOptions,
        })
            .pipe(first());
    }
    deleteResource(resourceId) {
        return this.http.delete(this.authResourceApi + `/${resourceId}`);
    }
    createResource(resourceIdentifier, applications_id) {
        return this.http.post(this.authResourceApi, {
            resourceIdentifier,
            applications_id,
        });
    }
    getClients(pageIndex, order) {
        return this.http
            .get(this.authClientApi +
            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)
            .pipe(first());
    }
    createClient(createClientData, longLive) {
        return this.http
            .post(this.authClientApi + `?longLive=${longLive}`, createClientData)
            .pipe(first());
    }
    deleteClient(subjectId) {
        return this.http.delete(`${this.authClientApi}/${subjectId}`).pipe(first());
    }
    updateClientRoles(clientId, roles) {
        return this.http
            .put(`${this.authClientApi}/${clientId}/role`, { roles })
            .pipe(first());
    }
    updateClient(subjectId, updateBody) {
        return this.http
            .put(`${this.authClientApi}/${subjectId}`, updateBody)
            .pipe(first());
    }
    getApplications() {
        return this.http.get(this.authApplicationApi);
    }
    getSecret(clientId) {
        return this.http
            .get(this.authClientApi + `/${clientId}/secret`)
            .pipe(first());
    }
    generateLongLiveToken(clientId, identifier) {
        return this.http
            .put(this.authClientApi + `/${clientId}/long-live`, {
            identifier,
        })
            .pipe(first());
    }
    removeLongLiveToken(clientId, identifier) {
        return this.http
            .put(this.authClientApi + `/${clientId}/long-live?remove_long_live=true`, {
            identifier,
        })
            .pipe(first());
    }
    modifyRevokeStatus(clientId, revoke) {
        return this.http
            .put(this.authClientApi + `/${clientId}/revoke`, {
            revoke,
        })
            .pipe(first());
    }
    get apiUrl() {
        return this.configuration.api;
    }
}
NodebootOauth2StarterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: NodebootOauth2StarterService, deps: [{ token: i1.HttpClient }, { token: 'configuration' }], target: i0.ɵɵFactoryTarget.Injectable });
NodebootOauth2StarterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: NodebootOauth2StarterService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: NodebootOauth2StarterService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['configuration']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,