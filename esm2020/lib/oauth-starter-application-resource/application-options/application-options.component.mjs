import { Component, Inject } from '@angular/core';
import { Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/forms";
import * as i3 from "../../nodeboot-oauth2-starter.service";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/button";
import * as i6 from "@angular/common";
import * as i7 from "@angular/material/input";
export class ApplicationOptionsComponent {
    constructor(dialogRef, formBuilder, nbService, resource) {
        this.dialogRef = dialogRef;
        this.formBuilder = formBuilder;
        this.nbService = nbService;
        this.resource = resource;
        this.options = [];
        this.optionsList = [];
        this.hidePassword = true;
        this.optionsList = [...resource.allowed];
        this.addResourceOptionForm = this.formBuilder.group({
            name: this.formBuilder.control('', Validators.compose([
                Validators.pattern(/^[a-zA-Z0-9_\.\-\/\s]+$/),
                Validators.minLength(1),
                Validators.maxLength(40),
            ])),
        });
    }
    ngOnInit() { }
    isBasicOption(allowed) {
        const basicOptions = ['*', 'create', 'select', 'update', 'delete'];
        const indexOfAllowed = basicOptions.indexOf(allowed);
        if (indexOfAllowed === -1)
            return false;
        return true;
    }
    addOptionToList() {
        const currentNameValue = this.addResourceOptionForm.get('name')?.value || '';
        if (currentNameValue === '')
            return;
        const indexOfCurrent = this.optionsList.findIndex((option) => option.allowed.toLowerCase() === currentNameValue.toLowerCase());
        if (indexOfCurrent === -1 &&
            this.addResourceOptionForm.get('name')?.valid) {
            this.optionsList.push({
                id: 0,
                allowed: this.addResourceOptionForm.get('name')?.value,
            });
            this.addResourceOptionForm.get('name')?.reset();
        }
    }
    removeFromOptionList(optionToRemove) {
        const indexToRemove = this.optionsList.findIndex((option) => option.allowed.toLowerCase() === optionToRemove.allowed.toLowerCase());
        this.optionsList.splice(indexToRemove, 1);
    }
    closeDialog() {
        this.dialogRef.close();
    }
    updateResourceOptions() {
        this.nbService
            .updateResourceOptions(this.resource.id, this.optionsList, this.resource.allowed)
            .subscribe({
            error: (err) => {
                this.dialogRef.disableClose = false;
                if (err.error) {
                    this.errorMessage = err.error.message;
                }
                else {
                    this.errorMessage = 'Unknown Error';
                }
            },
            next: () => {
                this.dialogRef.close(true);
            },
        });
    }
}
ApplicationOptionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ApplicationOptionsComponent, deps: [{ token: i1.MatDialogRef }, { token: i2.FormBuilder }, { token: i3.NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ApplicationOptionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: ApplicationOptionsComponent, selector: "lib-application-options", ngImport: i0, template: "<h2 mat-dialog-title>Resource options</h2>\n<form [formGroup]=\"addResourceOptionForm\" (ngSubmit)=\"updateResourceOptions()\">\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <div class=\"select-role\">\n      <mat-form-field class=\"forms-field\" appearance=\"fill\">\n        <mat-label>New Option</mat-label>\n        <input matInput formControlName=\"name\" name=\"name\" />\n        <mat-hint>Resource option</mat-hint>\n      </mat-form-field>\n      <button\n        [disabled]=\"!addResourceOptionForm.valid\"\n        type=\"button\"\n        (click)=\"addOptionToList()\"\n        mat-stroked-button\n      >\n        +\n      </button>\n    </div>\n    <div class=\"options-list-container\">\n      <div *ngFor=\"let option of optionsList\" class=\"roles-list\">\n        <div class=\"role-title\">\n          <h3>{{ option.allowed }}</h3>\n        </div>\n        <button\n          [disabled]=\"isBasicOption(option.allowed)\"\n          (click)=\"removeFromOptionList(option)\"\n          color=\"warn\"\n          type=\"button\"\n          mat-stroked-button\n        >\n          -\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!addResourceOptionForm.valid || optionsList.length === 0\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n", styles: [".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}.options-list-container{max-height:400px}\n"], components: [{ type: i4.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i5.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.MatLabel, selector: "mat-label" }, { type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ApplicationOptionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-application-options', template: "<h2 mat-dialog-title>Resource options</h2>\n<form [formGroup]=\"addResourceOptionForm\" (ngSubmit)=\"updateResourceOptions()\">\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <div class=\"select-role\">\n      <mat-form-field class=\"forms-field\" appearance=\"fill\">\n        <mat-label>New Option</mat-label>\n        <input matInput formControlName=\"name\" name=\"name\" />\n        <mat-hint>Resource option</mat-hint>\n      </mat-form-field>\n      <button\n        [disabled]=\"!addResourceOptionForm.valid\"\n        type=\"button\"\n        (click)=\"addOptionToList()\"\n        mat-stroked-button\n      >\n        +\n      </button>\n    </div>\n    <div class=\"options-list-container\">\n      <div *ngFor=\"let option of optionsList\" class=\"roles-list\">\n        <div class=\"role-title\">\n          <h3>{{ option.allowed }}</h3>\n        </div>\n        <button\n          [disabled]=\"isBasicOption(option.allowed)\"\n          (click)=\"removeFromOptionList(option)\"\n          color=\"warn\"\n          type=\"button\"\n          mat-stroked-button\n        >\n          -\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!addResourceOptionForm.valid || optionsList.length === 0\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n", styles: [".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}.options-list-container{max-height:400px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: i2.FormBuilder }, { type: i3.NodebootOauth2StarterService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,