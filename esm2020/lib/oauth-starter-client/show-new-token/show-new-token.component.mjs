import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/input";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "ngx-clipboard";
export class ShowNewTokenComponent {
    constructor(dialogRef, security) {
        this.dialogRef = dialogRef;
        this.security = security;
        this.hide = true;
    }
    ngOnInit() { }
    closeDialog() {
        this.dialogRef.close();
    }
}
ShowNewTokenComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShowNewTokenComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ShowNewTokenComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: ShowNewTokenComponent, selector: "lib-show-new-token", ngImport: i0, template: "<h2 mat-dialog-title>Client Access Token</h2>\n<div mat-dialog-content>\n  <mat-form-field class=\"full-width\" appearance=\"fill\">\n    <mat-label>Access Token</mat-label>\n    <input disabled matInput [value]=\"security.access_token\" />\n    <button\n      matTooltip=\"Copy token\"\n      mat-icon-button\n      matSuffix\n      ngxClipboard\n      [cbContent]=\"security.access_token\"\n      [attr.aria-label]=\"'Copy Token'\"\n    >\n      <mat-icon matSuffix>file_copy</mat-icon>\n    </button>\n  </mat-form-field>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button (click)=\"closeDialog()\" type=\"button\" color=\"warn\" mat-stroked-button>\n    Close\n  </button>\n</div>\n", styles: [".full-width{width:100%}\n"], components: [{ type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.MatLabel, selector: "mat-label" }, { type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i2.MatSuffix, selector: "[matSuffix]" }, { type: i7.ClipboardDirective, selector: "[ngxClipboard]", inputs: ["ngxClipboard", "container", "cbContent", "cbSuccessMsg"], outputs: ["cbOnSuccess", "cbOnError"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShowNewTokenComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-show-new-token', template: "<h2 mat-dialog-title>Client Access Token</h2>\n<div mat-dialog-content>\n  <mat-form-field class=\"full-width\" appearance=\"fill\">\n    <mat-label>Access Token</mat-label>\n    <input disabled matInput [value]=\"security.access_token\" />\n    <button\n      matTooltip=\"Copy token\"\n      mat-icon-button\n      matSuffix\n      ngxClipboard\n      [cbContent]=\"security.access_token\"\n      [attr.aria-label]=\"'Copy Token'\"\n    >\n      <mat-icon matSuffix>file_copy</mat-icon>\n    </button>\n  </mat-form-field>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button (click)=\"closeDialog()\" type=\"button\" color=\"warn\" mat-stroked-button>\n    Close\n  </button>\n</div>\n", styles: [".full-width{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1uZXctdG9rZW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbm9kZWJvb3Qtb2F1dGgyLXN0YXJ0ZXIvc3JjL2xpYi9vYXV0aC1zdGFydGVyLWNsaWVudC9zaG93LW5ldy10b2tlbi9zaG93LW5ldy10b2tlbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9ub2RlYm9vdC1vYXV0aDItc3RhcnRlci9zcmMvbGliL29hdXRoLXN0YXJ0ZXItY2xpZW50L3Nob3ctbmV3LXRva2VuL3Nob3ctbmV3LXRva2VuLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7OztBQU96RSxNQUFNLE9BQU8scUJBQXFCO0lBSWhDLFlBQ1MsU0FBOEMsRUFDckIsUUFBa0M7UUFEM0QsY0FBUyxHQUFULFNBQVMsQ0FBcUM7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFMcEUsU0FBSSxHQUFHLElBQUksQ0FBQztJQU1ULENBQUM7SUFFSixRQUFRLEtBQVUsQ0FBQztJQUVuQixXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDOztrSEFiVSxxQkFBcUIsOENBTXRCLGVBQWU7c0dBTmQscUJBQXFCLDBEQ1JsQyx3ckJBc0JBOzJGRGRhLHFCQUFxQjtrQkFMakMsU0FBUzsrQkFDRSxvQkFBb0I7OzBCQVUzQixNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYsIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1zaG93LW5ldy10b2tlbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zaG93LW5ldy10b2tlbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Nob3ctbmV3LXRva2VuLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFNob3dOZXdUb2tlbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGhpZGUgPSB0cnVlO1xuICBlcnJvck1lc3NhZ2UhOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPFNob3dOZXdUb2tlbkNvbXBvbmVudD4sXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBzZWN1cml0eTogeyBhY2Nlc3NfdG9rZW46IHN0cmluZyB9XG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG5cbiAgY2xvc2VEaWFsb2coKSB7XG4gICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoKTtcbiAgfVxufVxuIiwiPGgyIG1hdC1kaWFsb2ctdGl0bGU+Q2xpZW50IEFjY2VzcyBUb2tlbjwvaDI+XG48ZGl2IG1hdC1kaWFsb2ctY29udGVudD5cbiAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwiZnVsbC13aWR0aFwiIGFwcGVhcmFuY2U9XCJmaWxsXCI+XG4gICAgPG1hdC1sYWJlbD5BY2Nlc3MgVG9rZW48L21hdC1sYWJlbD5cbiAgICA8aW5wdXQgZGlzYWJsZWQgbWF0SW5wdXQgW3ZhbHVlXT1cInNlY3VyaXR5LmFjY2Vzc190b2tlblwiIC8+XG4gICAgPGJ1dHRvblxuICAgICAgbWF0VG9vbHRpcD1cIkNvcHkgdG9rZW5cIlxuICAgICAgbWF0LWljb24tYnV0dG9uXG4gICAgICBtYXRTdWZmaXhcbiAgICAgIG5neENsaXBib2FyZFxuICAgICAgW2NiQ29udGVudF09XCJzZWN1cml0eS5hY2Nlc3NfdG9rZW5cIlxuICAgICAgW2F0dHIuYXJpYS1sYWJlbF09XCInQ29weSBUb2tlbidcIlxuICAgID5cbiAgICAgIDxtYXQtaWNvbiBtYXRTdWZmaXg+ZmlsZV9jb3B5PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cbiAgPC9tYXQtZm9ybS1maWVsZD5cbjwvZGl2PlxuPGRpdiBhbGlnbj1cImVuZFwiIG1hdC1kaWFsb2ctYWN0aW9ucz5cbiAgPGJ1dHRvbiAoY2xpY2spPVwiY2xvc2VEaWFsb2coKVwiIHR5cGU9XCJidXR0b25cIiBjb2xvcj1cIndhcm5cIiBtYXQtc3Ryb2tlZC1idXR0b24+XG4gICAgQ2xvc2VcbiAgPC9idXR0b24+XG48L2Rpdj5cbiJdfQ==