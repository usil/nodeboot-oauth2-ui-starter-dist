import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/input";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "ngx-clipboard";
import * as i8 from "@angular/common";
export class ShowTokenComponent {
    constructor(dialogRef, clientResult) {
        this.dialogRef = dialogRef;
        this.clientResult = clientResult;
    }
    ngOnInit() { }
    closeDialog() {
        this.dialogRef.close();
    }
}
ShowTokenComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShowTokenComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ShowTokenComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: ShowTokenComponent, selector: "lib-show-token", ngImport: i0, template: "<h2 mat-dialog-title>Created client data</h2>\n<div mat-dialog-content>\n  <mat-form-field class=\"full-width\" appearance=\"fill\">\n    <mat-label>Client Id</mat-label>\n    <input disabled matInput [value]=\"clientResult.clientId\" />\n  </mat-form-field>\n  <mat-form-field class=\"full-width\" appearance=\"fill\">\n    <mat-label>Client secret</mat-label>\n    <input disabled matInput [value]=\"clientResult.clientSecret\" />\n    <button\n      matTooltip=\"Copy secret\"\n      mat-icon-button\n      matSuffix\n      ngxClipboard\n      [cbContent]=\"clientResult.clientSecret\"\n      [attr.aria-label]=\"'Copy Token'\"\n    >\n      <mat-icon matSuffix>file_copy</mat-icon>\n    </button>\n  </mat-form-field>\n  <mat-form-field\n    *ngIf=\"!(clientResult.access_token === '')\"\n    class=\"full-width\"\n    appearance=\"fill\"\n  >\n    <mat-label>Access Token</mat-label>\n    <input disabled matInput [value]=\"clientResult.access_token\" />\n    <button\n      matTooltip=\"Copy token\"\n      mat-icon-button\n      matSuffix\n      ngxClipboard\n      [cbContent]=\"clientResult.access_token\"\n      [attr.aria-label]=\"'Copy Token'\"\n    >\n      <mat-icon matSuffix>file_copy</mat-icon>\n    </button>\n  </mat-form-field>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button (click)=\"closeDialog()\" type=\"button\" color=\"warn\" mat-stroked-button>\n    Ok\n  </button>\n</div>\n", styles: [".full-width{width:100%}\n"], components: [{ type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.MatLabel, selector: "mat-label" }, { type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i2.MatSuffix, selector: "[matSuffix]" }, { type: i7.ClipboardDirective, selector: "[ngxClipboard]", inputs: ["ngxClipboard", "container", "cbContent", "cbSuccessMsg"], outputs: ["cbOnSuccess", "cbOnError"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShowTokenComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-show-token', template: "<h2 mat-dialog-title>Created client data</h2>\n<div mat-dialog-content>\n  <mat-form-field class=\"full-width\" appearance=\"fill\">\n    <mat-label>Client Id</mat-label>\n    <input disabled matInput [value]=\"clientResult.clientId\" />\n  </mat-form-field>\n  <mat-form-field class=\"full-width\" appearance=\"fill\">\n    <mat-label>Client secret</mat-label>\n    <input disabled matInput [value]=\"clientResult.clientSecret\" />\n    <button\n      matTooltip=\"Copy secret\"\n      mat-icon-button\n      matSuffix\n      ngxClipboard\n      [cbContent]=\"clientResult.clientSecret\"\n      [attr.aria-label]=\"'Copy Token'\"\n    >\n      <mat-icon matSuffix>file_copy</mat-icon>\n    </button>\n  </mat-form-field>\n  <mat-form-field\n    *ngIf=\"!(clientResult.access_token === '')\"\n    class=\"full-width\"\n    appearance=\"fill\"\n  >\n    <mat-label>Access Token</mat-label>\n    <input disabled matInput [value]=\"clientResult.access_token\" />\n    <button\n      matTooltip=\"Copy token\"\n      mat-icon-button\n      matSuffix\n      ngxClipboard\n      [cbContent]=\"clientResult.access_token\"\n      [attr.aria-label]=\"'Copy Token'\"\n    >\n      <mat-icon matSuffix>file_copy</mat-icon>\n    </button>\n  </mat-form-field>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button (click)=\"closeDialog()\" type=\"button\" color=\"warn\" mat-stroked-button>\n    Ok\n  </button>\n</div>\n", styles: [".full-width{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy10b2tlbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9ub2RlYm9vdC1vYXV0aDItc3RhcnRlci9zcmMvbGliL29hdXRoLXN0YXJ0ZXItY2xpZW50L3Nob3ctdG9rZW4vc2hvdy10b2tlbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9ub2RlYm9vdC1vYXV0aDItc3RhcnRlci9zcmMvbGliL29hdXRoLXN0YXJ0ZXItY2xpZW50L3Nob3ctdG9rZW4vc2hvdy10b2tlbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQWdCLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7Ozs7O0FBUXpFLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFDUyxTQUEyQyxFQUNsQixZQUFpQztRQUQxRCxjQUFTLEdBQVQsU0FBUyxDQUFrQztRQUNsQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7SUFDaEUsQ0FBQztJQUVKLFFBQVEsS0FBVSxDQUFDO0lBRW5CLFdBQVc7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7OytHQVZVLGtCQUFrQiw4Q0FHbkIsZUFBZTttR0FIZCxrQkFBa0Isc0RDVC9CLHc0Q0E0Q0E7MkZEbkNhLGtCQUFrQjtrQkFMOUIsU0FBUzsrQkFDRSxnQkFBZ0I7OzBCQU92QixNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYsIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBDbGllbnRDcmVhdGVDb250ZW50IH0gZnJvbSAnLi4vLi4vbm9kZWJvb3Qtb2F1dGgyLXN0YXJ0ZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1zaG93LXRva2VuJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Nob3ctdG9rZW4uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zaG93LXRva2VuLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFNob3dUb2tlbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxTaG93VG9rZW5Db21wb25lbnQ+LFxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgY2xpZW50UmVzdWx0OiBDbGllbnRDcmVhdGVDb250ZW50XG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG5cbiAgY2xvc2VEaWFsb2coKSB7XG4gICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoKTtcbiAgfVxufVxuIiwiPGgyIG1hdC1kaWFsb2ctdGl0bGU+Q3JlYXRlZCBjbGllbnQgZGF0YTwvaDI+XG48ZGl2IG1hdC1kaWFsb2ctY29udGVudD5cbiAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwiZnVsbC13aWR0aFwiIGFwcGVhcmFuY2U9XCJmaWxsXCI+XG4gICAgPG1hdC1sYWJlbD5DbGllbnQgSWQ8L21hdC1sYWJlbD5cbiAgICA8aW5wdXQgZGlzYWJsZWQgbWF0SW5wdXQgW3ZhbHVlXT1cImNsaWVudFJlc3VsdC5jbGllbnRJZFwiIC8+XG4gIDwvbWF0LWZvcm0tZmllbGQ+XG4gIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cImZ1bGwtd2lkdGhcIiBhcHBlYXJhbmNlPVwiZmlsbFwiPlxuICAgIDxtYXQtbGFiZWw+Q2xpZW50IHNlY3JldDwvbWF0LWxhYmVsPlxuICAgIDxpbnB1dCBkaXNhYmxlZCBtYXRJbnB1dCBbdmFsdWVdPVwiY2xpZW50UmVzdWx0LmNsaWVudFNlY3JldFwiIC8+XG4gICAgPGJ1dHRvblxuICAgICAgbWF0VG9vbHRpcD1cIkNvcHkgc2VjcmV0XCJcbiAgICAgIG1hdC1pY29uLWJ1dHRvblxuICAgICAgbWF0U3VmZml4XG4gICAgICBuZ3hDbGlwYm9hcmRcbiAgICAgIFtjYkNvbnRlbnRdPVwiY2xpZW50UmVzdWx0LmNsaWVudFNlY3JldFwiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cIidDb3B5IFRva2VuJ1wiXG4gICAgPlxuICAgICAgPG1hdC1pY29uIG1hdFN1ZmZpeD5maWxlX2NvcHk8L21hdC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L21hdC1mb3JtLWZpZWxkPlxuICA8bWF0LWZvcm0tZmllbGRcbiAgICAqbmdJZj1cIiEoY2xpZW50UmVzdWx0LmFjY2Vzc190b2tlbiA9PT0gJycpXCJcbiAgICBjbGFzcz1cImZ1bGwtd2lkdGhcIlxuICAgIGFwcGVhcmFuY2U9XCJmaWxsXCJcbiAgPlxuICAgIDxtYXQtbGFiZWw+QWNjZXNzIFRva2VuPC9tYXQtbGFiZWw+XG4gICAgPGlucHV0IGRpc2FibGVkIG1hdElucHV0IFt2YWx1ZV09XCJjbGllbnRSZXN1bHQuYWNjZXNzX3Rva2VuXCIgLz5cbiAgICA8YnV0dG9uXG4gICAgICBtYXRUb29sdGlwPVwiQ29weSB0b2tlblwiXG4gICAgICBtYXQtaWNvbi1idXR0b25cbiAgICAgIG1hdFN1ZmZpeFxuICAgICAgbmd4Q2xpcGJvYXJkXG4gICAgICBbY2JDb250ZW50XT1cImNsaWVudFJlc3VsdC5hY2Nlc3NfdG9rZW5cIlxuICAgICAgW2F0dHIuYXJpYS1sYWJlbF09XCInQ29weSBUb2tlbidcIlxuICAgID5cbiAgICAgIDxtYXQtaWNvbiBtYXRTdWZmaXg+ZmlsZV9jb3B5PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cbiAgPC9tYXQtZm9ybS1maWVsZD5cbjwvZGl2PlxuPGRpdiBhbGlnbj1cImVuZFwiIG1hdC1kaWFsb2ctYWN0aW9ucz5cbiAgPGJ1dHRvbiAoY2xpY2spPVwiY2xvc2VEaWFsb2coKVwiIHR5cGU9XCJidXR0b25cIiBjb2xvcj1cIndhcm5cIiBtYXQtc3Ryb2tlZC1idXR0b24+XG4gICAgT2tcbiAgPC9idXR0b24+XG48L2Rpdj5cbiJdfQ==