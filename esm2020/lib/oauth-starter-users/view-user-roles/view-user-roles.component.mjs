import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/material/expansion";
import * as i3 from "@angular/material/list";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/divider";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/common";
import * as i8 from "@angular/material/core";
export class ViewUserRolesComponent {
    constructor(dialogRef, user) {
        this.dialogRef = dialogRef;
        this.user = user;
        this.userTitle = `${user.name} roles`;
    }
    closeDialog() {
        this.dialogRef.close();
    }
    ngOnInit() { }
}
ViewUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ViewUserRolesComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ViewUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: ViewUserRolesComponent, selector: "lib-view-user-roles", ngImport: i0, template: "<h2 class=\"primary-color\" mat-dialog-title>{{ userTitle }}</h2>\n<div mat-dialog-content>\n  <div class=\"accordion-container\">\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\n        </mat-expansion-panel-header>\n        <h4>Grouped by application part</h4>\n        <mat-list>\n          <div *ngFor=\"let option of role.parts\">\n            <div mat-subheader>{{ option.applicationPartName }}</div>\n            <mat-list-item *ngFor=\"let allowed of option.allowed\">\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          </div>\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-stroked-button\n  >\n    Ok\n  </button>\n</div>\n", styles: [".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\n"], components: [{ type: i2.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i2.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { type: i3.MatList, selector: "mat-list, mat-action-list", inputs: ["disableRipple", "disabled"], exportAs: ["matList"] }, { type: i3.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["disableRipple", "disabled"], exportAs: ["matListItem"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i5.MatDivider, selector: "mat-divider", inputs: ["vertical", "inset"] }, { type: i6.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.MatAccordion, selector: "mat-accordion", inputs: ["multi", "hideToggle", "displayMode", "togglePosition"], exportAs: ["matAccordion"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i3.MatListSubheaderCssMatStyler, selector: "[mat-subheader], [matSubheader]" }, { type: i3.MatListIconCssMatStyler, selector: "[mat-list-icon], [matListIcon]" }, { type: i8.MatLine, selector: "[mat-line], [matLine]" }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ViewUserRolesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-view-user-roles', template: "<h2 class=\"primary-color\" mat-dialog-title>{{ userTitle }}</h2>\n<div mat-dialog-content>\n  <div class=\"accordion-container\">\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\n        </mat-expansion-panel-header>\n        <h4>Grouped by application part</h4>\n        <mat-list>\n          <div *ngFor=\"let option of role.parts\">\n            <div mat-subheader>{{ option.applicationPartName }}</div>\n            <mat-list-item *ngFor=\"let allowed of option.allowed\">\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          </div>\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-stroked-button\n  >\n    Ok\n  </button>\n</div>\n", styles: [".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy11c2VyLXJvbGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25vZGVib290LW9hdXRoMi1zdGFydGVyL3NyYy9saWIvb2F1dGgtc3RhcnRlci11c2Vycy92aWV3LXVzZXItcm9sZXMvdmlldy11c2VyLXJvbGVzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25vZGVib290LW9hdXRoMi1zdGFydGVyL3NyYy9saWIvb2F1dGgtc3RhcnRlci11c2Vycy92aWV3LXVzZXItcm9sZXMvdmlldy11c2VyLXJvbGVzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7Ozs7QUFRekUsTUFBTSxPQUFPLHNCQUFzQjtJQUdqQyxZQUNTLFNBQStDLEVBQ3RCLElBQVU7UUFEbkMsY0FBUyxHQUFULFNBQVMsQ0FBc0M7UUFDdEIsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUUxQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDO0lBQ3hDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsUUFBUSxLQUFVLENBQUM7O21IQWJSLHNCQUFzQiw4Q0FLdkIsZUFBZTt1R0FMZCxzQkFBc0IsMkRDVG5DLHltQ0FpQ0E7MkZEeEJhLHNCQUFzQjtrQkFMbEMsU0FBUzsrQkFDRSxxQkFBcUI7OzBCQVM1QixNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYsIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vLi4vbm9kZWJvb3Qtb2F1dGgyLXN0YXJ0ZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi12aWV3LXVzZXItcm9sZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vdmlldy11c2VyLXJvbGVzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdmlldy11c2VyLXJvbGVzLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFZpZXdVc2VyUm9sZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICB1c2VyVGl0bGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8Vmlld1VzZXJSb2xlc0NvbXBvbmVudD4sXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyB1c2VyOiBVc2VyXG4gICkge1xuICAgIHRoaXMudXNlclRpdGxlID0gYCR7dXNlci5uYW1lfSByb2xlc2A7XG4gIH1cblxuICBjbG9zZURpYWxvZygpIHtcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xuICB9XG4gIG5nT25Jbml0KCk6IHZvaWQge31cbn1cbiIsIjxoMiBjbGFzcz1cInByaW1hcnktY29sb3JcIiBtYXQtZGlhbG9nLXRpdGxlPnt7IHVzZXJUaXRsZSB9fTwvaDI+XG48ZGl2IG1hdC1kaWFsb2ctY29udGVudD5cbiAgPGRpdiBjbGFzcz1cImFjY29yZGlvbi1jb250YWluZXJcIj5cbiAgICA8bWF0LWFjY29yZGlvbj5cbiAgICAgIDxtYXQtZXhwYW5zaW9uLXBhbmVsICpuZ0Zvcj1cImxldCByb2xlIG9mIHVzZXIucm9sZXNcIj5cbiAgICAgICAgPG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyPlxuICAgICAgICAgIDxtYXQtcGFuZWwtdGl0bGU+IHt7IHJvbGUuaWRlbnRpZmllciB9fSA8L21hdC1wYW5lbC10aXRsZT5cbiAgICAgICAgPC9tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj5cbiAgICAgICAgPGg0Pkdyb3VwZWQgYnkgYXBwbGljYXRpb24gcGFydDwvaDQ+XG4gICAgICAgIDxtYXQtbGlzdD5cbiAgICAgICAgICA8ZGl2ICpuZ0Zvcj1cImxldCBvcHRpb24gb2Ygcm9sZS5wYXJ0c1wiPlxuICAgICAgICAgICAgPGRpdiBtYXQtc3ViaGVhZGVyPnt7IG9wdGlvbi5hcHBsaWNhdGlvblBhcnROYW1lIH19PC9kaXY+XG4gICAgICAgICAgICA8bWF0LWxpc3QtaXRlbSAqbmdGb3I9XCJsZXQgYWxsb3dlZCBvZiBvcHRpb24uYWxsb3dlZFwiPlxuICAgICAgICAgICAgICA8bWF0LWljb24gbWF0LWxpc3QtaWNvbj52cG5fa2V5PC9tYXQtaWNvbj5cbiAgICAgICAgICAgICAgPGRpdiBtYXQtbGluZT57eyBvcHRpb24uYXBwbGljYXRpb25QYXJ0TmFtZSB9fTp7eyBhbGxvd2VkIH19PC9kaXY+XG4gICAgICAgICAgICA8L21hdC1saXN0LWl0ZW0+XG4gICAgICAgICAgICA8bWF0LWRpdmlkZXI+PC9tYXQtZGl2aWRlcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9tYXQtbGlzdD5cbiAgICAgIDwvbWF0LWV4cGFuc2lvbi1wYW5lbD5cbiAgICA8L21hdC1hY2NvcmRpb24+XG4gIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGFsaWduPVwiZW5kXCIgbWF0LWRpYWxvZy1hY3Rpb25zPlxuICA8YnV0dG9uXG4gICAgKGNsaWNrKT1cImNsb3NlRGlhbG9nKClcIlxuICAgIHR5cGU9XCJidXR0b25cIlxuICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgbWF0LXN0cm9rZWQtYnV0dG9uXG4gID5cbiAgICBPa1xuICA8L2J1dHRvbj5cbjwvZGl2PlxuIl19